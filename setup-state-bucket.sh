#!/bin/bash

# =============================================================================
# SCRIPT PARA CONFIGURAR BUCKET DE STATE TERRAFORM
# =============================================================================

set -e

echo "üöÄ Configurando bucket para Terraform State..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Verificar se Oracle CLI est√° instalado
if ! command -v oci &> /dev/null; then
    echo -e "${RED}‚ùå Oracle CLI n√£o encontrado. Instale primeiro: https://docs.oracle.com/en-us/iaas/Content/API/SDKDocs/cliinstall.htm${NC}"
    exit 1
fi

# Verificar se Terraform est√° instalado
if ! command -v terraform &> /dev/null; then
    echo -e "${RED}‚ùå Terraform n√£o encontrado. Instale primeiro: https://terraform.io/downloads${NC}"
    exit 1
fi

echo -e "${BLUE}üìã Verificando configura√ß√£o Oracle CLI...${NC}"

# Verificar configura√ß√£o Oracle CLI
if ! oci iam region list > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Oracle CLI n√£o configurado. Execute: oci setup config${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Oracle CLI configurado${NC}"

# Obter namespace do tenancy
echo -e "${BLUE}üîç Obtendo namespace do tenancy...${NC}"
NAMESPACE=$(oci os ns get --query 'data' --raw-output)
echo -e "${GREEN}‚úÖ Namespace: ${NAMESPACE}${NC}"

# Executar terraform para criar bucket
echo -e "${BLUE}üèóÔ∏è Criando bucket com Terraform...${NC}"

# Verificar se terraform.tfvars existe
if [[ ! -f "terraform.tfvars" ]]; then
    echo -e "${RED}‚ùå Arquivo terraform.tfvars n√£o encontrado!${NC}"
    echo -e "${YELLOW}üí° Copie terraform.tfvars.example e configure com seus valores${NC}"
    exit 1
fi

# Inicializar Terraform (backend local)
echo -e "${BLUE}‚öôÔ∏è Inicializando Terraform...${NC}"
terraform init

# Validar configura√ß√£o
echo -e "${BLUE}‚úÖ Validando configura√ß√£o...${NC}"
terraform validate

# Planejar cria√ß√£o
echo -e "${BLUE}üìã Planejando cria√ß√£o do bucket...${NC}"
terraform plan -target=oci_objectstorage_bucket.terraform_state

# Confirmar cria√ß√£o
echo -e "${YELLOW}‚ùì Deseja criar o bucket de state? (y/N)${NC}"
read -r response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
    # Aplicar apenas bucket
    echo -e "${BLUE}üöÄ Criando bucket...${NC}"
    terraform apply -target=oci_objectstorage_bucket.terraform_state -auto-approve

    # Obter informa√ß√µes do bucket
    echo -e "${BLUE}üìä Obtendo informa√ß√µes do bucket...${NC}"
    BUCKET_NAME=$(terraform output -raw bucket_info | jq -r '.bucket_name')
    S3_ENDPOINT=$(terraform output -raw bucket_info | jq -r '.s3_endpoint')

    echo -e "${GREEN}‚úÖ Bucket criado com sucesso!${NC}"
    echo -e "${GREEN}üì¶ Nome do bucket: ${BUCKET_NAME}${NC}"
    echo -e "${GREEN}üåê Endpoint S3: ${S3_ENDPOINT}${NC}"

    # Instru√ß√µes para configurar backend
    echo -e "\n${BLUE}üìù PR√ìXIMOS PASSOS:${NC}"
    echo -e "${YELLOW}1. Configure Customer Secret Keys no Oracle Cloud:${NC}"
    echo -e "   - Acesse: Identity & Security > Users > [seu_usuario] > Customer Secret Keys"
    echo -e "   - Clique em 'Generate Secret Key'"
    echo -e "   - Guarde Access Key e Secret Key"

    echo -e "\n${YELLOW}2. Configure GitHub Secrets (se usando GitHub Actions):${NC}"
    echo -e "   AWS_ACCESS_KEY_ID = <sua_access_key>"
    echo -e "   AWS_SECRET_ACCESS_KEY = <sua_secret_key>"

    echo -e "\n${YELLOW}3. Atualize backend.tf:${NC}"
    echo -e "   - Substitua NAMESPACE por: ${NAMESPACE}"
    echo -e "   - Substitua PROJETO-AMBIENTE-terraform-state por: ${BUCKET_NAME}"
    echo -e "   - Descomente a configura√ß√£o backend"

    echo -e "\n${YELLOW}4. Migre state para backend remoto:${NC}"
    echo -e "   terraform init -migrate-state"

    echo -e "\n${GREEN}üéâ Setup do bucket conclu√≠do!${NC}"

else
    echo -e "${YELLOW}‚è≠Ô∏è Cria√ß√£o cancelada${NC}"
fi