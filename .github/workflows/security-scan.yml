name: 'Security Scan'

on:
  push:
    branches: [ "main", "develop" ]
    paths:
      - '**.tf'
      - '**.tfvars'
  pull_request:
    branches: [ "main" ]
    paths:
      - '**.tf'
      - '**.tfvars'
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    # Run tfsec security scan
    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: '.'
        format: 'sarif'
        soft_fail: false
        additional_args: --config-file .tfsec.yml

    # Upload results to GitHub Security tab
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: tfsec.sarif

    # Run Checkov security scan
    - name: Run Checkov
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        quiet: true
        soft_fail: false
        framework: terraform
        output_format: sarif
        output_file_path: checkov.sarif

    # Upload Checkov results
    - name: Upload Checkov SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov.sarif

    # Terraform validation
    - name: Terraform Init
      run: terraform init -backend=false

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Format Check
      run: terraform fmt -check=true -diff=true

    # Custom security checks
    - name: Check for Hardcoded Secrets
      run: |
        echo "üîç Checking for hardcoded secrets..."

        # Check for potential secrets in .tf files
        if grep -r "password\s*=" *.tf; then
          echo "‚ùå Found hardcoded passwords!"
          exit 1
        fi

        if grep -r "secret\s*=" *.tf; then
          echo "‚ùå Found hardcoded secrets!"
          exit 1
        fi

        if grep -r "token\s*=" *.tf; then
          echo "‚ùå Found hardcoded tokens!"
          exit 1
        fi

        echo "‚úÖ No hardcoded secrets found"

    - name: Check SSH Key Configuration
      run: |
        echo "üîê Checking SSH key configuration..."

        # Check if SSH keys are properly configured in variables
        if grep -q "ssh_public_key_path" variables.tf; then
          echo "‚úÖ SSH key path properly configured as variable"
        else
          echo "‚ùå SSH key path not found in variables"
          exit 1
        fi

    - name: Check Network Security
      run: |
        echo "üõ°Ô∏è Checking network security configuration..."

        # Check for overly permissive security rules
        if grep -r "0.0.0.0/0" *.tf; then
          echo "‚ö†Ô∏è Found potential open security rules - review carefully"
        fi

        echo "‚úÖ Network security check completed"

    # Summary comment for PR
    - name: Security Scan Summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `## üõ°Ô∏è Security Scan Results

          ‚úÖ **tfsec**: Terraform security scan completed
          ‚úÖ **Checkov**: Infrastructure security check completed
          ‚úÖ **Validation**: Terraform files validated
          ‚úÖ **Format**: Code format verified
          ‚úÖ **Secrets**: No hardcoded secrets detected
          ‚úÖ **SSH**: SSH key configuration verified
          ‚úÖ **Network**: Network security reviewed

          *Security scans completed successfully. Check the Security tab for detailed results.*

          ---
          *Scanned by: Security Bot ü§ñ*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })