name: 'Terraform - Oracle Cloud Infrastructure'

on:
  push:
    branches: [ "main", "develop" ]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/terraform-unified.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/terraform-unified.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform Action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

permissions:
  contents: read
  pull-requests: write
  security-events: write
  actions: read

jobs:
  # ============================================
  # JOB 1: Security Scan & Validation
  # ============================================
  security-and-validation:
    name: '🛡️ Security & Validation'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    # Security Scans
    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: '.'
        format: 'sarif'
        soft_fail: false
        additional_args: --config-file .tfsec.yml

    - name: Upload tfsec SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: tfsec.sarif

    - name: Run Checkov
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        quiet: true
        soft_fail: false
        framework: terraform
        output_format: sarif
        output_file_path: checkov.sarif

    - name: Upload Checkov SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov.sarif

    # Terraform Validation
    - name: Terraform Init
      run: terraform init -backend=false

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Format Check
      run: terraform fmt -check=true -diff=true

    # Custom Security Checks
    - name: Check for Hardcoded Secrets
      run: |
        echo "🔍 Checking for hardcoded secrets..."
        
        if grep -r "password\s*=" *.tf 2>/dev/null; then
          echo "❌ Found hardcoded passwords!"
          exit 1
        fi
        
        if grep -r "secret\s*=" *.tf 2>/dev/null; then
          echo "❌ Found hardcoded secrets!"
          exit 1
        fi
        
        if grep -r "token\s*=" *.tf 2>/dev/null; then
          echo "❌ Found hardcoded tokens!"
          exit 1
        fi
        
        echo "✅ No hardcoded secrets found"

    - name: Check SSH Key Configuration
      run: |
        echo "🔐 Checking SSH key configuration..."
        
        if grep -q "ssh_public_key_path" variables.tf; then
          echo "✅ SSH key path properly configured as variable"
        else
          echo "⚠️ SSH key path not found in variables"
        fi

    - name: Check Network Security
      run: |
        echo "🛡️ Checking network security configuration..."
        
        if grep -r "0.0.0.0/0" *.tf 2>/dev/null; then
          echo "⚠️ Found potential open security rules - review carefully"
        fi
        
        echo "✅ Network security check completed"

  # ============================================
  # JOB 2: Terraform Plan
  # ============================================
  plan:
    name: '📋 Terraform Plan'
    runs-on: ubuntu-latest
    needs: security-and-validation
    environment: production
    if: github.event.inputs.action != 'destroy'

    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
        terraform_wrapper: false

    - name: Setup Oracle Cloud CLI
      run: |
        curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh | bash -s -- --accept-all-defaults
        echo "$HOME/bin" >> $GITHUB_PATH

    - name: Configure OCI Credentials
      run: |
        mkdir -p ~/.oci
        echo "${{ secrets.OCI_CONFIG }}" > ~/.oci/config
        echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/private_key.pem
        chmod 600 ~/.oci/private_key.pem

    - name: Setup SSH Keys
      run: |
        mkdir -p ~/.ssh/oracle
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/oracle/ssh-key-2025-09-15.key
        echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/oracle/ssh-key-2025-09-15.key.pub
        chmod 600 ~/.ssh/oracle/ssh-key-2025-09-15.key
        chmod 644 ~/.ssh/oracle/ssh-key-2025-09-15.key.pub

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color -input=false -out=tfplan | tee plan_output.txt
      continue-on-error: true

    - name: Save Plan Output
      run: |
        echo "PLAN_OUTPUT<<EOF" >> $GITHUB_ENV
        cat plan_output.txt >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    # Upload plan for apply job
    - name: Upload Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: tfplan
        retention-days: 1

    # Comment on PR with plan
    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const planOutput = fs.readFileSync('plan_output.txt', 'utf8');
          
          const output = `## 🏗️ Terraform Plan Results
          
          #### 🛡️ Security Scan: ✅ Passed
          #### 📋 Terraform Plan: \`${{ steps.plan.outcome }}\`

          <details><summary>📖 Show Plan Details</summary>

          \`\`\`terraform
          ${planOutput}
          \`\`\`

          </details>

          ---
          *Pushed by: @${{ github.actor }} | Action: \`${{ github.event_name }}\`*
          *🤖 Automated by Terraform Unified Workflow*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

  # ============================================
  # JOB 3: Terraform Apply
  # ============================================
  apply:
    name: '🚀 Terraform Apply'
    runs-on: ubuntu-latest
    needs: plan
    environment: production
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')

    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
        terraform_wrapper: false

    - name: Setup Oracle Cloud CLI
      run: |
        curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh | bash -s -- --accept-all-defaults
        echo "$HOME/bin" >> $GITHUB_PATH

    - name: Configure OCI Credentials
      run: |
        mkdir -p ~/.oci
        echo "${{ secrets.OCI_CONFIG }}" > ~/.oci/config
        echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/private_key.pem
        chmod 600 ~/.oci/private_key.pem

    - name: Setup SSH Keys
      run: |
        mkdir -p ~/.ssh/oracle
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/oracle/ssh-key-2025-09-15.key
        echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/oracle/ssh-key-2025-09-15.key.pub
        chmod 600 ~/.ssh/oracle/ssh-key-2025-09-15.key
        chmod 644 ~/.ssh/oracle/ssh-key-2025-09-15.key.pub

    - name: Terraform Init
      run: terraform init

    # Download the plan from previous job
    - name: Download Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan

    - name: Terraform Apply
      run: |
        echo "🚀 Applying Terraform changes..."
        terraform apply -auto-approve tfplan

    - name: Terraform Output
      id: output
      run: |
        echo "## 🎉 Infrastructure Deployed Successfully!" | tee -a $GITHUB_STEP_SUMMARY
        echo "" | tee -a $GITHUB_STEP_SUMMARY
        echo "### 🔑 SSH Commands:" | tee -a $GITHUB_STEP_SUMMARY
        terraform output -json ssh_commands 2>/dev/null | jq -r '.[]' | tee -a $GITHUB_STEP_SUMMARY || echo "No SSH commands available"
        echo "" | tee -a $GITHUB_STEP_SUMMARY
        echo "### 🌐 Public IPs:" | tee -a $GITHUB_STEP_SUMMARY
        terraform output -json public_ips 2>/dev/null | jq -r '.[]' | tee -a $GITHUB_STEP_SUMMARY || echo "No public IPs available"

  # ============================================
  # JOB 4: Terraform Destroy
  # ============================================
  destroy:
    name: '🗑️ Terraform Destroy'
    runs-on: ubuntu-latest
    environment: production
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'

    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    - name: Setup Oracle Cloud CLI
      run: |
        curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh | bash -s -- --accept-all-defaults
        echo "$HOME/bin" >> $GITHUB_PATH

    - name: Configure OCI Credentials
      run: |
        mkdir -p ~/.oci
        echo "${{ secrets.OCI_CONFIG }}" > ~/.oci/config
        echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/private_key.pem
        chmod 600 ~/.oci/private_key.pem

    - name: Setup SSH Keys
      run: |
        mkdir -p ~/.ssh/oracle
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/oracle/ssh-key-2025-09-15.key
        echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/oracle/ssh-key-2025-09-15.key.pub
        chmod 600 ~/.ssh/oracle/ssh-key-2025-09-15.key
        chmod 644 ~/.ssh/oracle/ssh-key-2025-09-15.key.pub

    - name: Terraform Init
      run: terraform init

    - name: Terraform Destroy
      run: |
        echo "⚠️ ⚠️ ⚠️ DESTROYING INFRASTRUCTURE ⚠️ ⚠️ ⚠️"
        terraform destroy -auto-approve

    - name: Cleanup Message
      run: |
        echo "## 🗑️ Infrastructure Destroyed Successfully!" | tee -a $GITHUB_STEP_SUMMARY
        echo "All Oracle Cloud resources have been removed." | tee -a $GITHUB_STEP_SUMMARY
