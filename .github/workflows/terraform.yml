name: 'Oracle Cloud Infrastructure'

on:
  push:
    branches: [ "main" ]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform Action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Setup Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    # Setup Oracle Cloud CLI
    - name: Setup Oracle Cloud CLI
      run: |
        curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh | bash -s -- --accept-all-defaults
        echo "$HOME/bin" >> $GITHUB_PATH

    # Configure Oracle Cloud credentials
    - name: Configure OCI
      run: |
        mkdir -p ~/.oci
        echo "${{ secrets.OCI_CONFIG }}" > ~/.oci/config
        echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/private_key.pem
        chmod 600 ~/.oci/private_key.pem

    # Create SSH key for instances
    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh/oracle
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/oracle/ssh-key-2025-09-15.key
        echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/oracle/ssh-key-2025-09-15.key.pub
        chmod 600 ~/.ssh/oracle/ssh-key-2025-09-15.key
        chmod 644 ~/.ssh/oracle/ssh-key-2025-09-15.key.pub

    # Initialize Terraform
    - name: Terraform Init
      run: terraform init

    # Validate Terraform files
    - name: Terraform Validate
      run: terraform validate

    # Format check
    - name: Terraform Format Check
      run: terraform fmt -check=true -diff=true

    # Security scan with tfsec
    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        soft_fail: true

    # Plan Terraform changes
    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color -input=false -out=tfplan
      continue-on-error: true

    # Add Plan to PR comment
    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # Apply Terraform (only on manual dispatch with apply action or push to main)
    - name: Terraform Apply
      if: |
        (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
      run: terraform apply -auto-approve tfplan

    # Destroy Terraform (only on manual dispatch with destroy action)
    - name: Terraform Destroy
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
      run: |
        echo "‚ö†Ô∏è DESTROYING INFRASTRUCTURE ‚ö†Ô∏è"
        terraform destroy -auto-approve

    # Show outputs after apply
    - name: Terraform Output
      if: |
        (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
      run: |
        echo "## üéâ Infrastructure Deployed Successfully!"
        echo ""
        echo "### SSH Commands:"
        terraform output -json ssh_commands | jq -r '.[]'
        echo ""
        echo "### Public IPs:"
        terraform output -json public_ips | jq -r '.[]'

    # Cleanup on destroy
    - name: Cleanup Message
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
      run: |
        echo "## üóëÔ∏è Infrastructure Destroyed Successfully!"
        echo "All Oracle Cloud resources have been removed."